{"version":3,"file":"src/gltfConverter.js","mappings":"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","sources":["webpack://twinmaker-photogrammetry-pipeline/./src/gltfConverter.ts","webpack://twinmaker-photogrammetry-pipeline/external commonjs \"aws-sdk\"","webpack://twinmaker-photogrammetry-pipeline/external commonjs \"obj2gltf\"","webpack://twinmaker-photogrammetry-pipeline/external commonjs \"unzipper\"","webpack://twinmaker-photogrammetry-pipeline/external commonjs \"uuid\"","webpack://twinmaker-photogrammetry-pipeline/external node-commonjs \"fs\"","webpack://twinmaker-photogrammetry-pipeline/external node-commonjs \"path\"","webpack://twinmaker-photogrammetry-pipeline/webpack/bootstrap","webpack://twinmaker-photogrammetry-pipeline/webpack/startup"],"sourcesContent":["/**\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: MIT-0\n * */\nimport * as unzipper from \"unzipper\";\nimport * as AWS from \"aws-sdk\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { promises as fs } from \"fs\";\nimport { PutObjectRequest } from \"aws-sdk/clients/s3\";\nimport { CreateSceneRequest, CreateSceneResponse } from \"aws-sdk/clients/iottwinmaker\";\nconst obj2gltf = require(\"obj2gltf\");\nconst path = require(\"path\");\nconst s3 = new AWS.S3();\nconst twinmaker = new AWS.IoTTwinMaker();\n\nconst WORKSPACE_BUCKET: string = process.env.TWINMAKER_WORKSPACE_BUCKET;\nconst TWINMAKER_WORKSPACE_ID = process.env.TWINMAKER_WORKSPACE_ID;\nlet IS_ODM = true;\n\nexports.handler = async (event: any) => {\n  console.log(event);\n  const bucket = process.env.PROCESSED_BUCKET;\n  const filename = decodeURIComponent(\n    event.Records[0].s3.object.key.replace(/\\+/g, \" \")\n  );\n  console.log(`File name ${filename}`);\n\n  if (filename.toLowerCase() != \"all.zip\") {\n    IS_ODM = false;\n  }\n\n  const params = {\n    Key: filename,\n    Bucket: bucket,\n  };\n\n  const zip = s3\n    .getObject(params)\n    .createReadStream()\n    .pipe(unzipper.Parse({ forceStream: true }));\n\n  try {\n    await rmdir('/tmp');\n  } catch (e) {\n    console.log('Could not delete /tmp dir, it probably does not exist');\n  }\n  await fs.mkdir(\"/tmp/odm_texturing\");\n\n  for await (const e of zip) {\n    const entry = e;\n    console.log(entry);\n    const type = entry.type;\n    if (type === \"File\") {\n      const entryName = entry.path;\n      console.log(entryName);\n      if (entryName.toLowerCase().includes(\"odm_textured_model\") //ODM OBJ naming convention\n        || entryName.toLowerCase().includes(\"scene_mesh_textured\")) { //DroneDeploy OBJ naming convention\n        const fileData = await entry.buffer();\n        console.log(fileData);\n        await fs.writeFile(`/tmp/${entryName}`, fileData);\n      }\n    }\n    entry.autodrain();\n\n  }\n  const options = {\n    binary: true,\n  };\n\n\n  let glb;\n  //Simple way to determine if we have an ODM or DroneDeploy generated OBJ\n  if (IS_ODM) {\n    console.log(\"Processing ODM OBJ file\");\n    glb = await obj2gltf(\"/tmp/odm_texturing/odm_textured_model_geo.obj\", options);\n  } else {\n    console.log(\"Processing DroneDeploy OBJ file\");\n    glb = await obj2gltf(\"/tmp/scene_mesh_textured.obj\", options);\n  }\n\n  console.log(glb);\n  try {\n    const uploadParams: PutObjectRequest = {\n      Bucket: WORKSPACE_BUCKET,\n      Key: \"model.glb\",\n      Body: glb,\n    };\n    await s3.upload(uploadParams).promise();\n    console.log('Uploaded model to workspace bucket');\n\n    const uploadSceneParams: PutObjectRequest = {\n      Bucket: WORKSPACE_BUCKET,\n      Key: \"scene.json\",\n      Body: JSON.stringify(getSceneJSON()),\n    };\n    await s3.upload(uploadSceneParams).promise();\n    console.log('Uploaded scene metadata to workspace bucket');\n\n    const createSceneRequest: CreateSceneRequest = {\n      workspaceId: TWINMAKER_WORKSPACE_ID,\n      sceneId: `PhotogrammeteryScene-${uuidv4()}`,\n      contentLocation: `s3://${WORKSPACE_BUCKET}/scene.json`\n    };\n    const createSceneResponse: CreateSceneResponse = await twinmaker.createScene(createSceneRequest).promise();\n    console.log(createSceneResponse);\n  } catch (e) {\n    console.error(e);\n  }\n\n};\n\nconst rmdir = async (dir: string) => {\n  var list = await fs.readdir(dir);\n  for(var i = 0; i < list.length; i++) {\n      var filename = path.join(dir, list[i]);\n      var stat = await fs.stat(filename);\n      if(filename == \".\" || filename == \"..\") {\n          // pass these files\n      } else if(stat.isDirectory()) {\n          // rmdir recursively\n          await rmdir(filename);\n      } else {\n          // rm fiilename\n          await fs.unlink(filename);\n      }\n  }\n  await fs.rmdir(dir);\n};\n\n\nconst getSceneJSON = () => {\n  return {\n    specVersion: \"1.0\",\n    version: \"1\",\n    unit: \"meters\",\n    properties: {},\n    nodes: [\n      {\n        name: \"model\",\n        transform: {\n          position: [\n            0,\n            0,\n            0\n          ],\n          rotation: [\n            0,\n            0,\n            0\n          ],\n          scale: [\n            1,\n            1,\n            1\n          ]\n        },\n        transformConstraint: {},\n        children: [\n          1\n        ],\n        components: [\n          {\n            type: \"ModelRef\",\n            uri: `s3://${WORKSPACE_BUCKET}/model.glb`,\n            modelType: \"GLB\"\n          }\n        ],\n        properties: {}\n      },\n      {\n        name: \"Light\",\n        transform: {\n          position: [\n            0,\n            0,\n            0\n          ],\n          rotation: [\n            0,\n            0,\n            0\n          ],\n          scale: [\n            1,\n            1,\n            1\n          ]\n        },\n        transformConstraint: {},\n        components: [\n          {\n            type: \"Light\",\n            lightType: \"Ambient\",\n            lightSettings: {\n              color: 16777215,\n              intensity: 1,\n              castShadow: true\n            }\n          }\n        ],\n        properties: {}\n      }\n    ],\n    rootNodeIndexes: [\n      0\n    ]\n  }\n}\n","module.exports = require(\"aws-sdk\");","module.exports = require(\"obj2gltf\");","module.exports = require(\"unzipper\");","module.exports = require(\"uuid\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(255);\n"],"names":["obj2gltf","path","s3","AWS","S3","twinmaker","IoTTwinMaker","WORKSPACE_BUCKET","process","env","TWINMAKER_WORKSPACE_BUCKET","TWINMAKER_WORKSPACE_ID","IS_ODM","exports","handler","event","console","log","bucket","PROCESSED_BUCKET","filename","decodeURIComponent","Records","object","key","replace","toLowerCase","params","Key","Bucket","zip","getObject","createReadStream","pipe","unzipper","Parse","forceStream","rmdir","e","mkdir","entry","type","entryName","includes","fileData","buffer","writeFile","autodrain","options","binary","glb","uploadParams","Body","upload","promise","uploadSceneParams","JSON","stringify","getSceneJSON","createSceneRequest","workspaceId","sceneId","contentLocation","createSceneResponse","createScene","error","dir","list","readdir","i","length","join","stat","isDirectory","unlink","specVersion","version","unit","properties","nodes","name","transform","position","rotation","scale","transformConstraint","children","components","uri","modelType","lightType","lightSettings","color","intensity","castShadow","rootNodeIndexes","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}